(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{476:function(t,e,a){"use strict";a.r(e);var s=a(0),r=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"creating-a-native-rocket-pool-node-without-docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-native-rocket-pool-node-without-docker"}},[t._v("#")]),t._v(" Creating a Native Rocket Pool Node without Docker")]),t._v(" "),e("p",[t._v("In this section, we will walk through the process of installing the Rocket Pool Smartnode stack natively onto your system, without the use of Docker containers.")]),t._v(" "),e("p",[t._v("The general plan is as follows:")]),t._v(" "),e("ul",[e("li",[t._v("Create system services for the Rocket Pool components (the "),e("strong",[t._v("node")]),t._v(" process, and optionally the "),e("strong",[t._v("watchtower")]),t._v(" process if you are an Oracle Node)")]),t._v(" "),e("li",[t._v("Create a system service for the Execution client")]),t._v(" "),e("li",[t._v("Create a system service for the Beacon node")]),t._v(" "),e("li",[t._v("Create a system service for the Validator client")]),t._v(" "),e("li",[t._v("Configure Rocket Pool to use communicate with those services")])]),t._v(" "),e("p",[t._v("This is a fairly involved setup so it will take some time to complete.")]),t._v(" "),e("p",[t._v("The diversity of Operating Systems and distros available make it impractical to make guides available for all of them.\nThe instructions in this guide are tailored to a Debian-based system (including Ubuntu).\nFor other distros or operating systems, you may follow the high-level steps described in the guide but will have to substitute certain commands for the ones that your system uses as appropriate.")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),e("p",[t._v("This guide is intended for users that are experienced with Linux system administration and usage.\nThis includes using the terminal, creating system accounts, managing permissions, and installing services.\n"),e("strong",[t._v("If you are not familiar with these activites, we do not recommend that you use the native mode.")])])]),t._v(" "),e("h2",{attrs:{id:"creating-service-accounts"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#creating-service-accounts"}},[t._v("#")]),t._v(" Creating Service Accounts")]),t._v(" "),e("p",[t._v("The first step is to create new system accounts for the services and disable logins and shell access for them.\nThe reason for having separate user accounts is practical: if your Execution or Consensus clients have a major vulnerability like an "),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Arbitrary_code_execution",target:"_blank",rel:"noopener noreferrer"}},[t._v("Arbitrary Code Execution"),e("OutboundLink")],1),t._v(" exploit, doing this will limit the amount of damage an attacker can actually do since they're running on an account with limited permissions.")]),t._v(" "),e("p",[t._v("We're going to create one account for your Execution client, one for your Beacon Node, and one for both Rocket Pool and the validator client.\nThe sharing is necessary because Rocket Pool will create the validator's key files once you create a new minipool, and it will set the permissions so that only its own user has access to them.\nIf you're using "),e("strong",[t._v("Nimbus")]),t._v(" for your Consensus client, then it will share an account with Rocket Pool instead since it doesn't have a separate validator client.")]),t._v(" "),e("p",[t._v("Start by creating an account for your Execution client, which we'll call "),e("code",[t._v("eth1")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("useradd")]),t._v(" -r -s /sbin/nologin eth1\n")])])]),e("p",[t._v("Do the same for your Beacon Node, which we'll call "),e("code",[t._v("eth2")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("useradd")]),t._v(" -r -s /sbin/nologin eth2\n")])])]),e("p",[t._v("Finally, make one for the validator and Rocket Pool, which we'll call "),e("code",[t._v("rp")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("useradd")]),t._v(" -r -s /sbin/nologin rp\n")])])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),e("p",[t._v("If you're using Nimbus, ignore the "),e("code",[t._v("rp")]),t._v(" account.\nAny time you see it used in this guide, just substitute it with "),e("code",[t._v("eth2")]),t._v(" instead.")])]),t._v(" "),e("p",[t._v("Now, add yourself to the "),e("code",[t._v("rp")]),t._v(" group.\nYou'll need to do this in order to use the Rocket Pool CLI, because it and the Rocket Pool daemon both need to access the Execution layer wallet file.")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("usermod")]),t._v(" -aG rp "),e("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$USER")]),t._v("\n")])])]),e("p",[t._v("After this, logout and back in for the changes to take effect.")]),t._v(" "),e("h2",{attrs:{id:"installing-rocket-pool"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#installing-rocket-pool"}},[t._v("#")]),t._v(" Installing Rocket Pool")]),t._v(" "),e("h3",{attrs:{id:"setting-up-the-binaries"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setting-up-the-binaries"}},[t._v("#")]),t._v(" Setting up the Binaries")]),t._v(" "),e("p",[t._v("Start by making a folder for Rocket Pool and a data subfolder.\nYou can put this wherever you want; for this guide, I'll put it into "),e("code",[t._v("/srv")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" -p /srv/rocketpool/data\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("chown")]),t._v(" -R "),e("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$USER")]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$USER")]),t._v(" /srv/rocketpool\n")])])]),e("p",[t._v("Now, download the CLI and daemon binaries (or ignore this and build them from source if you prefer).\nChoose the platform that your system uses from the tabs below.")]),t._v(" "),e("Tabs",{attrs:{type:"border-card"}},[e("Tab",{attrs:{label:"Linux x64"}},[e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" https://github.com/rocket-pool/smartnode-install/releases/latest/download/rocketpool-cli-linux-amd64 -O /usr/local/bin/rocketpool\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" https://github.com/rocket-pool/smartnode-install/releases/latest/download/rocketpool-daemon-linux-amd64 -O /usr/local/bin/rocketpoold\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" +x /usr/local/bin/rocketpool /usr/local/bin/rocketpoold\n")])])])]),t._v(" "),e("Tab",{attrs:{label:"Linux arm64"}},[e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" https://github.com/rocket-pool/smartnode-install/releases/latest/download/rocketpool-cli-linux-arm64 -O /usr/local/bin/rocketpool\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" https://github.com/rocket-pool/smartnode-install/releases/latest/download/rocketpool-daemon-linux-arm64 -O /usr/local/bin/rocketpoold\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" +x /usr/local/bin/rocketpool /usr/local/bin/rocketpoold\n")])])])]),t._v(" "),e("Tab",{attrs:{label:"macOS x64"}},[e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" https://github.com/rocket-pool/smartnode-install/releases/latest/download/rocketpool-cli-darwin-amd64 -O /usr/local/bin/rocketpool\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" https://github.com/rocket-pool/smartnode-install/releases/latest/download/rocketpool-daemon-darwin-amd64 -O /usr/local/bin/rocketpoold\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" +x /usr/local/bin/rocketpool /usr/local/bin/rocketpoold\n")])])])]),t._v(" "),e("Tab",{attrs:{label:"macOS arm64"}},[e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" https://github.com/rocket-pool/smartnode-install/releases/latest/download/rocketpool-cli-darwin-arm64 -O /usr/local/bin/rocketpool\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" https://github.com/rocket-pool/smartnode-install/releases/latest/download/rocketpool-daemon-darwin-arm64 -O /usr/local/bin/rocketpoold\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" +x /usr/local/bin/rocketpool /usr/local/bin/rocketpoold\n")])])])])],1),t._v(" "),e("p",[t._v("Next, grab the validator restart script - Rocket Pool will use this when it needs to restart your Validator Client to load new keys after you create a new minipool:")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" https://github.com/rocket-pool/smartnode-install/raw/release/install/scripts/restart-vc.sh -O /srv/rocketpool/restart-vc.sh\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" +x /srv/rocketpool/restart-vc.sh\n")])])]),e("p",[t._v("Now open "),e("code",[t._v("~/.profile")]),t._v(" with your editor of choice and add this line to the end:")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("alias")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("rp")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rocketpool -d /usr/local/bin/rocketpoold -c /srv/rocketpool"')]),t._v("\n")])])]),e("p",[t._v("Save it, then reload your profile:")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("source")]),t._v(" ~/.profile\n")])])]),e("p",[t._v("This will let you interact with Rocket Pool's CLI with the "),e("code",[t._v("rp")]),t._v(" command, which is a nice shortcut.")]),t._v(" "),e("h3",{attrs:{id:"creating-the-services"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#creating-the-services"}},[t._v("#")]),t._v(" Creating the Services")]),t._v(" "),e("p",[t._v("Next up, we'll create a "),e("code",[t._v("systemd")]),t._v(" service for the Rocket Pool node daemon.\nThis is the service that will automatically check for and claim RPL rewards after each checkpoint, and stake minipools once you've created them via "),e("code",[t._v("node deposit")]),t._v(".")]),t._v(" "),e("p",[t._v("Optionally, if you're an Oracle DAO member, create the corresponding "),e("code",[t._v("watchtower")]),t._v(" service as well.\nIf you are not an Oracle DAO member, you can ignore that service.")]),t._v(" "),e("Tabs",{attrs:{type:"border-card"}},[e("Tab",{attrs:{label:"Node"}},[e("p",[t._v("Create the "),e("code",[t._v("rp-node")]),t._v(" service:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo nano /etc/systemd/system/rp-node.service\n")])])]),e("p",[t._v("Contents:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[Unit]\nDescription=rp-node\nAfter=network.target\n\n[Service]\nType=simple\nUser=rp\nRestart=always\nRestartSec=5\nExecStart=/usr/local/bin/rocketpoold --settings /srv/rocketpool/user-settings.yml node\n\n[Install]\nWantedBy=multi-user.target\n")])])]),e("p",[t._v("Create a log file for the service, so you can watch its output - this will replace the behavior of "),e("code",[t._v("rocketpool service logs node")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("nano /srv/rocketpool/node-log.sh\n")])])]),e("p",[t._v("Contents:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("#!/bin/bash\njournalctl -u rp-node -b -f\n")])])]),e("p",[t._v("Save it, then make it executable:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("chmod +x /srv/rocketpool/node-log.sh\n")])])]),e("p",[t._v("Now you can watch the node's logs by simply running "),e("code",[t._v("$ /srv/rocketpool/node-log.sh")]),t._v(".")])]),t._v(" "),e("Tab",{attrs:{label:"Watchtower"}},[e("p",[t._v("Create a service for the watchtower:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo nano /etc/systemd/system/rp-watchtower.service\n")])])]),e("p",[t._v("Contents:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[Unit]\nDescription=rp-node\nAfter=network.target\n\n[Service]\nType=simple\nUser=rp\nRestart=always\nRestartSec=5\nExecStart=/usr/local/bin/rocketpoold --settings /srv/rocketpool/user-settings.yml watchtower\n\n[Install]\nWantedBy=multi-user.target\n")])])]),e("p",[t._v("Create a log file for the watchtower:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("nano /srv/rocketpool/watchtower-log.sh\n")])])]),e("p",[t._v("Contents:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("#!/bin/bash\njournalctl -u rp-watchtower -b -f\n")])])]),e("p",[t._v("Save it, then make it executable:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("chmod +x /srv/rocketpool/watchtower-log.sh\n")])])])])],1),t._v(" "),e("h2",{attrs:{id:"installing-the-execution-client"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#installing-the-execution-client"}},[t._v("#")]),t._v(" Installing the Execution Client")]),t._v(" "),e("p",[t._v("For the sake of simplicity, we're going to use Geth as our example during this guide.\nIf you have another client in mind, adapt these instructions to that client accordingly.")]),t._v(" "),e("p",[t._v("Start by making a folder for the Geth binary and the log script:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo mkdir /srv/geth\n\nsudo chown $USER:$USER /srv/geth\n")])])]),e("p",[t._v("Next, make a folder for the chain data on the SSD.\nPick the set up that you have below:")]),t._v(" "),e("Tabs",{attrs:{type:"border-card"}},[e("Tab",{attrs:{label:"Same SSD as the OS"}},[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo mkdir /srv/geth/geth_data\n\nsudo chown eth1:eth1 /srv/geth/geth_data\n")])])])]),t._v(" "),e("Tab",{attrs:{label:"Separate SSD (Raspberry Pi)"}},[e("p",[t._v("This assumes that your SSD is mounted on a folder like "),e("code",[t._v("/mnt/rpdata")]),t._v("; substitute it accordingly with the folder you used.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo mkdir /mnt/rpdata/geth_data\n\nsudo chown eth1:eth1 /mnt/rpdata/geth_data\n")])])])])],1),t._v(" "),e("p",[t._v("Now, grab "),e("a",{attrs:{href:"https://geth.ethereum.org/downloads/",target:"_blank",rel:"noopener noreferrer"}},[t._v("the latest Geth binary"),e("OutboundLink")],1),t._v(" for your architecture, or "),e("a",{attrs:{href:"https://github.com/ethereum/go-ethereum/",target:"_blank",rel:"noopener noreferrer"}},[t._v("build it from source"),e("OutboundLink")],1),t._v(" if you want.\nIf you download it, it will be an archive.\nExtract it and copy the contents of the "),e("code",[t._v("geth")]),t._v(" folder to "),e("code",[t._v("/srv/geth")]),t._v(".\nFor example, if you have an x64 system:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("cd /tmp\n\nwget https://gethstore.blob.core.windows.net/builds/geth-linux-amd64-1.10.3-991384a7.tar.gz\n\ntar xzf geth-linux-amd64-1.10.3-991384a7.tar.gz\n\ncp geth-linux-amd64-1.10.3-991384a7/geth /srv/geth\n")])])]),e("p",[t._v("Next, create a systemd service for Geth. You can use this as a template, and modify the command line arguments as you see fit:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo nano /etc/systemd/system/geth.service\n")])])]),e("Tabs",{attrs:{type:"border-card"}},[e("Tab",{attrs:{label:"Same SSD as the OS"}},[e("p",[t._v("Contents:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[Unit]\nDescription=Geth\nAfter=network.target\n\n[Service]\nType=simple\nUser=eth1\nRestart=always\nRestartSec=5\nExecStart=/srv/geth/geth --datadir /srv/geth/geth_data --mainnet --http --http.port 8545 --http.api eth,net,personal,web3 --ws --ws.port 8546 --ws.api eth,net,personal,web3\n\n[Install]\nWantedBy=multi-user.target\n")])])])]),t._v(" "),e("Tab",{attrs:{label:"Separate SSD (Raspberry Pi)"}},[e("p",[t._v("Contents:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[Unit]\nDescription=Geth\nAfter=network.target\n\n[Service]\nType=simple\nUser=eth1\nRestart=always\nRestartSec=5\nExecStart=taskset 0x0c ionice -c 3 /srv/geth/geth --mainnet --cache 512 --maxpeers 12 --datadir /mnt/rpdata/geth_data --http --http.port 8545 --http.api eth,net,personal,web3 --ws --ws.port 8546 --ws.api eth,net,personal,web3\n\n[Install]\nWantedBy=multi-user.target\n")])])]),e("p",[t._v("Note that the "),e("code",[t._v("taskset 0x0c ionice -c 3")]),t._v(" at the start is meant for Raspberry Pi's or other similarly low-power systems:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("taskset 0x0c")]),t._v(" constrains Geth to only run on CPUs 2 and 3. This way, it won't interfere with the Beacon Node.")]),t._v(" "),e("li",[e("code",[t._v("ionice -c 3")]),t._v(" tells the system that Geth's disk access is a super low priority - if the Beacon Node needs to access the SSD, it will always have priority over Geth.")])]),t._v(" "),e("p",[t._v("You can omit that prefix if you're not on a low-power system.")])])],1),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),e("p",[t._v("The above configuration is for the "),e("strong",[t._v("Ethereum mainnet")]),t._v(".\nIf you want to run on the "),e("strong",[t._v("Prater testnet")]),t._v(" instead, replace the "),e("code",[t._v("--mainnet")]),t._v(" flag in the "),e("code",[t._v("ExecStart")]),t._v(" string with "),e("code",[t._v("--goerli")]),t._v(".")])]),t._v(" "),e("p",[t._v("Some notes:")]),t._v(" "),e("ul",[e("li",[t._v("You can optionally use the "),e("code",[t._v("--cache")]),t._v(" flag to lower the amount of RAM that Geth uses.\n"),e("ul",[e("li",[t._v("If you have 4 GB of RAM, "),e("strong",[t._v("set this to 256")]),t._v(".")]),t._v(" "),e("li",[t._v("If you have 8 GB of RAM, "),e("strong",[t._v("you can leave it at 512")]),t._v(" so it syncs faster and doesn't require pruning as frequently.")]),t._v(" "),e("li",[t._v("For larger amounts of RAM, you can ignore this flag.")])])]),t._v(" "),e("li",[t._v("You can optionally use the "),e("code",[t._v("--maxpeers")]),t._v(" flag to lower the peer count. The peer count isn't very important for the Execution client, and lowering it can free up some extra resources if you need them.")])]),t._v(" "),e("p",[t._v("Lastly, add a log watcher script so you can check on Geth to see how it's doing:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo nano /srv/geth/log.sh\n")])])]),e("p",[t._v("Contents:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("#!/bin/bash\njournalctl -u geth -b -f\n")])])]),e("p",[t._v("Make it executable:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo chmod +x /srv/geth/log.sh\n")])])]),e("p",[t._v("Now you can see the Geth logs by doing "),e("code",[t._v("$ /srv/geth/log.sh")]),t._v(".\nThis replaces the behavior that "),e("code",[t._v("rocketpool service logs eth1")]),t._v(" used to provide, since it can't do that without Docker.")]),t._v(" "),e("p",[t._v("All set on the the Execution client; now for the Consensus client.")]),t._v(" "),e("h2",{attrs:{id:"installing-the-beacon-node"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#installing-the-beacon-node"}},[t._v("#")]),t._v(" Installing the Beacon Node")]),t._v(" "),e("p",[t._v("Start by making a folder for your Beacon Node binary and log script.\nChoose the instructions for the client you want to run:")]),t._v(" "),e("Tabs",{attrs:{type:"border-card"}},[e("Tab",{attrs:{label:"Lighthouse"}},[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo mkdir /srv/lighthouse\n\nsudo chown $USER:$USER /srv/lighthouse\n")])])]),e("p",[t._v("Next, make a folder for Lighthouse's chain data on the SSD.")]),t._v(" "),e("p",[t._v("If your chain data and OS live on the same SSD:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo mkdir /srv/lighthouse/lighthouse_data\n\nsudo chown eth2:eth2 /srv/lighthouse/lighthouse_data\n")])])]),e("p",[t._v("If they live on separate disks (e.g. an external SSD, as with the "),e("strong",[t._v("Raspberry Pi")]),t._v("), then assuming that your SSD is mounted to "),e("code",[t._v("/mnt/rpdata")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo mkdir /mnt/rpdata/lighthouse_data\n\nsudo chown eth2:eth2 /mnt/rpdata/lighthouse_data\n")])])]),e("p",[t._v("Now, grab "),e("a",{attrs:{href:"https://github.com/sigp/lighthouse/releases/",target:"_blank",rel:"noopener noreferrer"}},[t._v("the latest Lighthouse release"),e("OutboundLink")],1),t._v(", or "),e("a",{attrs:{href:"https://github.com/sigp/lighthouse/",target:"_blank",rel:"noopener noreferrer"}},[t._v("build it from source"),e("OutboundLink")],1),t._v(" if you want.")]),t._v(" "),e("p",[t._v("Copy "),e("code",[t._v("lighthouse")]),t._v(" from the release archive into "),e("code",[t._v("/srv/lighthouse/")]),t._v(".")])]),t._v(" "),e("Tab",{attrs:{label:"Nimbus"}},[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo mkdir /srv/nimbus\n\nsudo chown $USER:$USER /srv/nimbus\n")])])]),e("p",[t._v("Next, make a folder for Nimbus's chain data on the SSD.")]),t._v(" "),e("p",[t._v("If your chain data and OS live on the same SSD:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo mkdir /srv/nimbus/nimbus_data\n\nsudo chown eth2:eth2 /srv/nimbus/nimbus_data\n")])])]),e("p",[t._v("If they live on separate disks (e.g. an external SSD, as with the "),e("strong",[t._v("Raspberry Pi")]),t._v("), then assuming that your SSD is mounted to "),e("code",[t._v("/mnt/rpdata")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo mkdir /mnt/rpdata/nimbus_data\n\nsudo chown eth2:eth2 /mnt/rpdata/nimbus_data\n")])])]),e("p",[t._v("Now, grab "),e("a",{attrs:{href:"https://github.com/status-im/nimbus-eth2/releases",target:"_blank",rel:"noopener noreferrer"}},[t._v("the latest Nimbus release"),e("OutboundLink")],1),t._v(", or "),e("a",{attrs:{href:"https://github.com/status-im/nimbus-eth2/",target:"_blank",rel:"noopener noreferrer"}},[t._v("build it from source"),e("OutboundLink")],1),t._v(" if you want.")]),t._v(" "),e("p",[t._v("Copy "),e("code",[t._v("build/nimbus_beacon_node")]),t._v(" from the release archive into "),e("code",[t._v("/srv/nimbus/")]),t._v(", optionally renaming it to "),e("code",[t._v("nimbus")]),t._v(" (the rest of the guide assumes you have done this):")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" build/nimbus_beacon_node /srv/nimbus/nimbus\n")])])])]),t._v(" "),e("Tab",{attrs:{label:"Prysm"}},[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo mkdir /srv/prysm\n\nsudo chown $USER:$USER /srv/prysm\n")])])]),e("p",[t._v("Next, make a folder for Prysm's chain data on the SSD.")]),t._v(" "),e("p",[t._v("If your chain data and OS live on the same SSD:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo mkdir /srv/prysm/prysm_data\n\nsudo chown eth2:eth2 /srv/prysm/prysm_data\n")])])]),e("p",[t._v("If they live on separate disks (e.g. an external SSD, as with the "),e("strong",[t._v("Raspberry Pi")]),t._v("), then assuming that your SSD is mounted to "),e("code",[t._v("/mnt/rpdata")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo mkdir /mnt/rpdata/prysm_data\n\nsudo chown eth2:eth2 /mnt/rpdata/prysm_data\n")])])]),e("p",[t._v("Now, grab "),e("a",{attrs:{href:"https://github.com/prysmaticlabs/prysm/releases/",target:"_blank",rel:"noopener noreferrer"}},[t._v("the latest Prysm binaries"),e("OutboundLink")],1),t._v(", or "),e("a",{attrs:{href:"https://github.com/prysmaticlabs/prysm/",target:"_blank",rel:"noopener noreferrer"}},[t._v("build them from source"),e("OutboundLink")],1),t._v(" if you want.")]),t._v(" "),e("p",[t._v("Specifically, you want to save the "),e("code",[t._v("beacon-chain-xxx")]),t._v(" and "),e("code",[t._v("validator-xxx")]),t._v(" binaries the release page archive into "),e("code",[t._v("/srv/prysm/")]),t._v(" (and optionally, rename them to "),e("code",[t._v("beacon-chain")]),t._v(" and "),e("code",[t._v("validator")]),t._v(" - the rest of the guide will assume you have done this).")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),e("p",[t._v("If you want to run on the "),e("strong",[t._v("Prater testnet")]),t._v(", you will need Prater's "),e("code",[t._v("genesis.ssz")]),t._v(" file to function correctly.\nDownload it like this:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo wget https://github.com/eth-clients/eth2-networks/raw/master/shared/prater/genesis.ssz -O /srv/prysm/genesis.ssz\n\nsudo chown eth2:eth2 /srv/prysm/genesis.ssz\n")])])])])]),t._v(" "),e("Tab",{attrs:{label:"Teku"}},[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo mkdir /srv/teku\n\nsudo chown $USER:$USER /srv/teku\n\nsudo mkhomedir_helper rp\n")])])]),e("p",[t._v("Next, make a folder for Teku's chain data on the SSD.")]),t._v(" "),e("p",[t._v("If your chain data and OS live on the same SSD:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo mkdir /srv/teku/teku_data\n\nsudo chown eth2:eth2 /srv/teku/teku_data\n")])])]),e("p",[t._v("If they live on separate disks (e.g. an external SSD, as with the "),e("strong",[t._v("Raspberry Pi")]),t._v("), then assuming that your SSD is mounted to "),e("code",[t._v("/mnt/rpdata")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo mkdir /mnt/rpdata/teku_data\n\nsudo chown eth2:eth2 /mnt/rpdata/teku_data\n")])])]),e("p",[t._v("Teku needs Java 11 to function, ensure that you have it installed.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo apt install openjdk-11-jre -y\n")])])]),e("p",[t._v("Now, grab "),e("a",{attrs:{href:"https://github.com/ConsenSys/teku/releases/",target:"_blank",rel:"noopener noreferrer"}},[t._v("the latest Teku release"),e("OutboundLink")],1),t._v(", or "),e("a",{attrs:{href:"https://github.com/ConsenSys/teku/",target:"_blank",rel:"noopener noreferrer"}},[t._v("build it from source"),e("OutboundLink")],1),t._v(" if you want.")]),t._v(" "),e("p",[t._v("Copy the "),e("code",[t._v("bin")]),t._v(" and "),e("code",[t._v("lib")]),t._v(" folders from the release archive into "),e("code",[t._v("/srv/teku/")]),t._v(".")])])],1),t._v(" "),e("p",[t._v("Next, create a systemd service for your Beacon Node.\nThe following are examples that show typical command line arguments to use in each one:")]),t._v(" "),e("Tabs",{attrs:{type:"border-card"}},[e("Tab",{attrs:{label:"Lighthouse x64"}},[e("p",[t._v("The following assumes you use the default data folder at: "),e("code",[t._v("/srv/lighthouse/lighthouse_data")]),t._v(".\nIf you have a different configuration, like an external SSD, replace all instances of that below with your own folder.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo nano /etc/systemd/system/lh-bn.service\n")])])]),e("p",[t._v("Contents:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[Unit]\nDescription=Lighthouse Beacon Node\nAfter=network.target\n\n[Service]\nType=simple\nUser=eth2\nRestart=always\nRestartSec=5\nExecStart=/srv/lighthouse/lighthouse beacon --network mainnet --datadir /srv/lighthouse/lighthouse_data --port 9001 --discovery-port 9001 --eth1 --eth1-endpoints http://localhost:8545 --http --http-port 5052 --eth1-blocks-per-log-query 150 --disable-upnp\n\n[Install]\nWantedBy=multi-user.target\n")])])]),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),e("p",[t._v("The above configuration is for the "),e("strong",[t._v("Ethereum mainnet")]),t._v(".\nIf you want to use the "),e("strong",[t._v("Prater testnet")]),t._v(" instead, replace the "),e("code",[t._v("--network mainnet")]),t._v(" flag in the "),e("code",[t._v("ExecStart")]),t._v(" string with "),e("code",[t._v("--network prater")]),t._v(".")])])]),t._v(" "),e("Tab",{attrs:{label:"Nimbus x64"}},[e("p",[t._v("The following assumes you use the default data folder at: "),e("code",[t._v("/srv/nimbus/nimbus_data")]),t._v(".\nIf you have a different configuration, like an external SSD, replace all instances of that below with your own folder.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo nano /etc/systemd/system/nimbus.service\n")])])]),e("p",[t._v("Contents:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('[Unit]\nDescription=Nimbus\nAfter=network.target\n\n[Service]\nType=simple\nUser=rp\nRestart=always\nRestartSec=5\nExecStart=/srv/nimbus/nimbus --non-interactive --network=mainnet --data-dir=/srv/nimbus/nimbus_data --insecure-netkey-password --validators-dir=/srv/rocketpool/data/validators/nimbus/validators --secrets-dir=/srv/rocketpool/data/validators/nimbus/secrets --graffiti="RP Nimbus" --web3-url="ws://127.0.0.1:8546" --tcp-port=9001 --udp-port=9001 --rest --rest-port=5052 --num-threads=0\n\n[Install]\nWantedBy=multi-user.target\n')])])]),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),e("p",[t._v("The above configuration is for the "),e("strong",[t._v("Ethereum mainnet")]),t._v(".\nIf you want to use the "),e("strong",[t._v("Prater testnet")]),t._v(" instead, replace the "),e("code",[t._v("--network=mainnet")]),t._v(" flag in the "),e("code",[t._v("ExecStart")]),t._v(" string with "),e("code",[t._v("--network=prater")]),t._v(".")])]),t._v(" "),e("p",[t._v("Now, create the validator folders that Nimbus needs because it will crash without them:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo mkdir -p /srv/rocketpool/data/validators/nimbus/validators\n\nsudo mkdir -p /srv/rocketpool/data/validators/nimbus/secrets\n\nsudo chown eth2:eth2 /srv/rocketpool/data/validators/ -R\n")])])]),e("p",[t._v("Next, we have to give the "),e("code",[t._v("rp")]),t._v(" user the ability to restart the validator client when new validator keys are created.")]),t._v(" "),e("p",[t._v("Open the "),e("code",[t._v("sudoers")]),t._v(" file:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo visudo\n")])])]),e("p",[t._v("Add this line under "),e("code",[t._v("# Cmnd alias specification")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Cmnd_Alias RP_CMDS = /usr/bin/systemctl restart nimbus\n")])])]),e("p",[t._v("Add this line under "),e("code",[t._v("# User privilege specification")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("rp    ALL=(ALL) NOPASSWD: RP_CMDS\n")])])]),e("p",[t._v("That whole section should now look like this:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# Cmnd alias specification\nCmnd_Alias RP_CMDS = /usr/bin/systemctl restart nimbus\n\n# User privilege specification\nroot    ALL=(ALL:ALL) ALL\nrp    ALL=(ALL) NOPASSWD: RP_CMDS\n")])])]),e("p",[t._v("Finally, modify "),e("code",[t._v("/srv/rocketpool/restart-vc.sh")]),t._v(":")]),t._v(" "),e("ul",[e("li",[t._v("Uncomment the line at the end and change it to "),e("code",[t._v("sudo systemctl restart nimbus")])])])]),t._v(" "),e("Tab",{attrs:{label:"Prysm x64"}},[e("p",[t._v("The following assumes you use the default data folder at: "),e("code",[t._v("/srv/prysm/prysm_data")]),t._v(".\nIf you have a different configuration, like an external SSD, replace all instances of that below with your own folder.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo nano /etc/systemd/system/prysm-bn.service\n")])])]),e("p",[t._v("Contents:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[Unit]\nDescription=Prysm Beacon Node\nAfter=network.target\n\n[Service]\nType=simple\nUser=eth2\nRestart=always\nRestartSec=5\nExecStart=/srv/prysm/beacon-chain --accept-terms-of-use --mainnet --datadir /srv/prysm/prysm_data --p2p-tcp-port 9001 --p2p-udp-port 9001 --http-web3provider http://localhost:8545 --rpc-port 5053 --grpc-gateway-port 5052 --eth1-header-req-limit 150\n\n[Install]\nWantedBy=multi-user.target\n")])])]),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),e("p",[t._v("The above configuration is for the "),e("strong",[t._v("Ethereum mainnet")]),t._v(".\nIf you want to use the "),e("strong",[t._v("Prater testnet")]),t._v(" instead, replace the "),e("code",[t._v("ExecStart")]),t._v(" string with the following:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ExecStart=/srv/prysm/beacon-chain --accept-terms-of-use --prater --genesis-state /srv/prysm/genesis.ssz --datadir /srv/prysm/prysm_data --p2p-tcp-port 9001 --p2p-udp-port 9001 --http-web3provider http://localhost:8545 --rpc-port 5053 --grpc-gateway-port 5052 --eth1-header-req-limit 150\n")])])])])]),t._v(" "),e("Tab",{attrs:{label:"Teku x64"}},[e("p",[t._v("The following assumes you use the default data folder at: "),e("code",[t._v("/srv/teku/teku_data")]),t._v(".\nIf you have a different configuration, like an external SSD, replace all instances of that below with your own folder.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo nano /etc/systemd/system/teku-bn.service\n")])])]),e("p",[t._v("Contents:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[Unit]\nDescription=Teku Beacon Node\nAfter=network.target\n\n[Service]\nType=simple\nUser=eth2\nRestart=always\nRestartSec=5\nExecStart=/srv/teku/bin/teku --network=mainnet --data-path=/srv/teku/teku_data --p2p-port=9001 --eth1-endpoint=http://localhost:8545 --rest-api-enabled --rest-api-port=5052 --eth1-deposit-contract-max-request-size=150\n\n[Install]\nWantedBy=multi-user.target\n")])])]),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),e("p",[t._v("The above configuration is for the "),e("strong",[t._v("Ethereum mainnet")]),t._v(".\nIf you want to use the "),e("strong",[t._v("Prater testnet")]),t._v(" instead, replace the "),e("code",[t._v("--network=mainnet")]),t._v(" flag in the "),e("code",[t._v("ExecStart")]),t._v(" string with "),e("code",[t._v("--network=prater")]),t._v(".")])])]),t._v(" "),e("Tab",{attrs:{label:"Lighthouse arm64"}},[e("p",[t._v("The following assumes you have a separate SSD for your chain data mounted to "),e("code",[t._v("/mnt/rpdata")]),t._v(".\nIf you have a different configuration, replace all instances of that below with your own folder.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo nano /etc/systemd/system/lh-bn.service\n")])])]),e("p",[t._v("Contents:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[Unit]\nDescription=Lighthouse Beacon Node\nAfter=network.target\n\n[Service]\nType=simple\nUser=eth2\nRestart=always\nRestartSec=5\nExecStart=ionice -c 2 -n 0 /srv/lighthouse/lighthouse beacon --network mainnet --datadir /mnt/rpdata/lighthouse_data --port 9001 --discovery-port 9001 --eth1 --eth1-endpoints http://localhost:8545 --http --http-port 5052 --eth1-blocks-per-log-query 150 --disable-upnp\n\n[Install]\nWantedBy=multi-user.target\n")])])]),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),e("p",[t._v("The above configuration is for the "),e("strong",[t._v("Ethereum mainnet")]),t._v(".\nIf you want to use the "),e("strong",[t._v("Prater testnet")]),t._v(" instead, replace the "),e("code",[t._v("--network=mainnet")]),t._v(" flag in the "),e("code",[t._v("ExecStart")]),t._v(" string with "),e("code",[t._v("--network=prater")]),t._v(".")])])]),t._v(" "),e("Tab",{attrs:{label:"Nimbus arm64"}},[e("p",[t._v("Note that since Nimbus runs the beacon node and validator client together, you only need to make one service to act as both.")]),t._v(" "),e("p",[t._v("The following assumes you have a separate SSD for your chain data mounted to "),e("code",[t._v("/mnt/rpdata")]),t._v(".\nIf you have a different configuration, replace all instances of that below with your own folder.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo nano /etc/systemd/system/nimbus.service\n")])])]),e("p",[t._v("Contents:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('[Unit]\nDescription=Nimbus\nAfter=network.target\n\n[Service]\nType=simple\nUser=eth2\nRestart=always\nRestartSec=5\nExecStart=ionice -c 2 -n 0 /srv/nimbus/nimbus --max-peers=60 --non-interactive --network=mainnet --data-dir=/mnt/rpdata/nimbus_data --insecure-netkey-password --validators-dir=/srv/rocketpool/data/validators/nimbus/validators --secrets-dir=/srv/rocketpool/data/validators/nimbus/secrets --graffiti="RP Nimbus" --web3-url=ws://localhost:8546 --tcp-port=9001 --udp-port=9001 --rest --rest-port=5052 --num-threads=0\n\n[Install]\nWantedBy=multi-user.target\n')])])]),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),e("p",[t._v("The above configuration is for the "),e("strong",[t._v("Ethereum mainnet")]),t._v(".\nIf you want to use the "),e("strong",[t._v("Prater testnet")]),t._v(" instead, replace the "),e("code",[t._v("--network=mainnet")]),t._v(" flag in the "),e("code",[t._v("ExecStart")]),t._v(" string with "),e("code",[t._v("--network=prater")]),t._v(".")])]),t._v(" "),e("p",[t._v("Note the following:")]),t._v(" "),e("ul",[e("li",[t._v("Nimbus is preceeded by "),e("code",[t._v("taskset 0x01")]),t._v(". Basically, this constrains Nimbus to only run on CPU 0 (since it's single threaded). If you followed the Geth guide for the Execution client (which constrained Geth to CPU 2 and 3), this will ensure that the processes don't overlap on the same core and will provide maximum performance.")]),t._v(" "),e("li",[t._v("Change the "),e("code",[t._v("--graffiti")]),t._v(" to whatever you want.")]),t._v(" "),e("li",[t._v("By default, Nimbus will try to connect to 160 peers. We changed it here to "),e("code",[t._v("--max-peers=60")]),t._v(" to lighten the CPU load a little, but you are free to experiement with this if you want.")])]),t._v(" "),e("p",[t._v("Now, create the validator folders that Nimbus needs because it will crash without them:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo mkdir -p /srv/rocketpool/data/validators/nimbus/validators\n\nsudo mkdir -p /srv/rocketpool/data/validators/nimbus/secrets\n\nsudo chown eth2:eth2 /srv/rocketpool/data/validators/ -R\n")])])]),e("p",[t._v("Next, we have to give the "),e("code",[t._v("rp")]),t._v(" user the ability to restart the validator client when new validator keys are created.")]),t._v(" "),e("p",[t._v("Open the "),e("code",[t._v("sudoers")]),t._v(" file:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo nano /etc/sudoers\n")])])]),e("p",[t._v("Add this line under "),e("code",[t._v("# Cmnd alias specification")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Cmnd_Alias RP_CMDS = /usr/bin/systemctl restart nimbus\n")])])]),e("p",[t._v("Add this line under "),e("code",[t._v("# User privilege specification")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("rp    ALL=(ALL) NOPASSWD: RP_CMDS\n")])])]),e("p",[t._v("That whole section should now look like this:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# Cmnd alias specification\nCmnd_Alias RP_CMDS = /usr/bin/systemctl restart nimbus\n\n# User privilege specification\nroot    ALL=(ALL:ALL) ALL\nrp    ALL=(ALL) NOPASSWD: RP_CMDS\n")])])]),e("p",[t._v("Finally, modify "),e("code",[t._v("/srv/rocketpool/restart-vc.sh")]),t._v(":")]),t._v(" "),e("ul",[e("li",[t._v("Uncomment the line at the end and change it to "),e("code",[t._v("sudo systemctl restart nimbus")])])])]),t._v(" "),e("Tab",{attrs:{label:"Prysm arm64"}},[e("p",[t._v("The following assumes you have a separate SSD for your chain data mounted to "),e("code",[t._v("/mnt/rpdata")]),t._v(".\nIf you have a different configuration, replace all instances of that below with your own folder.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo nano /etc/systemd/system/prysm-bn.service\n")])])]),e("p",[t._v("Contents:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[Unit]\nDescription=Prysm Beacon Node\nAfter=network.target\n\n[Service]\nType=simple\nUser=eth2\nRestart=always\nRestartSec=5\nExecStart=ionice -c 2 -n 0 /srv/prysm/beacon-chain --accept-terms-of-use --mainnet --datadir /mnt/rpdata/prysm_data --p2p-tcp-port 9001 --p2p-udp-port 9001 --http-web3provider http://localhost:8545 --rpc-port 5053 --grpc-gateway-port 5052 --eth1-header-req-limit 150\n\n[Install]\nWantedBy=multi-user.target\n")])])]),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),e("p",[t._v("The above configuration is for the "),e("strong",[t._v("Ethereum mainnet")]),t._v(".\nIf you want to use the "),e("strong",[t._v("Prater testnet")]),t._v(" instead, replace the "),e("code",[t._v("ExecStart")]),t._v(" string with the following:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ExecStart=ionice -c 2 -n 0 /srv/prysm/beacon-chain --accept-terms-of-use --prater --genesis-state /srv/prysm/genesis.ssz --datadir /mnt/rpdata/prysm_data --p2p-tcp-port 9001 --p2p-udp-port 9001 --http-web3provider http://localhost:8545 --rpc-port 5053 --grpc-gateway-port 5052 --eth1-header-req-limit 150\n")])])])])]),t._v(" "),e("Tab",{attrs:{label:"Teku arm64"}},[e("p",[t._v("The following assumes you have a separate SSD for your chain data mounted to "),e("code",[t._v("/mnt/rpdata")]),t._v(".\nIf you have a different configuration, replace all instances of that below with your own folder.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo nano /etc/systemd/system/teku-bn.service\n")])])]),e("p",[t._v("Contents:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[Unit]\nDescription=Teku Beacon Node\nAfter=network.target\n\n[Service]\nType=simple\nUser=eth2\nRestart=always\nRestartSec=5\nExecStart=ionice -c 2 -n 0 /srv/teku/bin/teku --network=mainnet --data-path=/mnt/rpdata/teku_data --p2p-port=9001 --eth1-endpoint=http://localhost:8545 --rest-api-enabled --rest-api-port=5052 -eth1-deposit-contract-max-request-size=150\n\n[Install]\nWantedBy=multi-user.target\n")])])]),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),e("p",[t._v("The above configuration is for the "),e("strong",[t._v("Ethereum mainnet")]),t._v(".\nIf you want to use the "),e("strong",[t._v("Prater testnet")]),t._v(" instead, replace the "),e("code",[t._v("--network=mainnet")]),t._v(" flag in the "),e("code",[t._v("ExecStart")]),t._v(" string with "),e("code",[t._v("--network=prater")]),t._v(".")])])])],1),t._v(" "),e("p",[t._v("Some notes:")]),t._v(" "),e("ul",[e("li",[t._v("The user is set to "),e("code",[t._v("eth2")]),t._v(".")]),t._v(" "),e("li",[t._v("For arm64 systems, "),e("code",[t._v("ionice -c 2 -n 0")]),t._v(" tells your system to give your Beacon Node the highest possible priority for disk I/O (behind critical system processes), so it can process and attest as quickly as possible")])]),t._v(" "),e("p",[t._v("Next, add a log watcher script in the folder you put your Beacon Node into:")]),t._v(" "),e("Tabs",{attrs:{type:"border-card"}},[e("Tab",{attrs:{label:"Lighthouse"}},[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo nano /srv/lighthouse/bn-log.sh\n")])])]),e("p",[t._v("The contents should be this:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("#!/bin/bash\njournalctl -u lh-bn -b -f\n")])])]),e("p",[t._v("Make it executable:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo chmod +x /srv/lighthouse/bn-log.sh\n")])])])]),t._v(" "),e("Tab",{attrs:{label:"Nimbus"}},[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo nano /srv/nimbus/log.sh\n")])])]),e("p",[t._v("The contents should be this:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("#!/bin/bash\njournalctl -u nimbus -b -f\n")])])]),e("p",[t._v("Make it executable:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo chmod +x /srv/nimbus/log.sh\n")])])])]),t._v(" "),e("Tab",{attrs:{label:"Prysm"}},[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo nano /srv/prysm/bn-log.sh\n")])])]),e("p",[t._v("The contents should be this:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("#!/bin/bash\njournalctl -u prysm-bn -b -f\n")])])]),e("p",[t._v("Make it executable:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo chmod +x /srv/prysm/bn-log.sh\n")])])])]),t._v(" "),e("Tab",{attrs:{label:"Teku"}},[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo nano /srv/teku/bn-log.sh\n")])])]),e("p",[t._v("The contents should be this:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("#!/bin/bash\njournalctl -u teku-bn -b -f\n")])])]),e("p",[t._v("Make it executable:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo chmod +x /srv/teku/bn-log.sh\n")])])])])],1),t._v(" "),e("p",[t._v("With that, the Beacon Node is all set.\nOn to the validator client!")]),t._v(" "),e("h2",{attrs:{id:"installing-the-validator-client"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#installing-the-validator-client"}},[t._v("#")]),t._v(" Installing the Validator Client")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),e("p",[t._v("Nimbus does not have a seperate validator client at this time, so it is not included in these instructions.\nIf you plan to use Nimbus, you've already taken care of this during the Beacon Node setup and can skip this section.")])]),t._v(" "),e("p",[t._v("First, create a systemd service for your validator client.\nThe following are examples that show typical command line arguments to use in each one:")]),t._v(" "),e("Tabs",{attrs:{type:"border-card"}},[e("Tab",{attrs:{label:"Lighthouse"}},[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo nano /etc/systemd/system/lh-vc.service\n")])])]),e("p",[t._v("Contents:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('[Unit]\nDescription=Lighthouse Validator\nAfter=network.target\n\n[Service]\nType=simple\nUser=rp\nRestart=always\nRestartSec=5\nExecStart=/srv/lighthouse/lighthouse validator --network mainnet --datadir /srv/rocketpool/data/validators/lighthouse --init-slashing-protection --beacon-node "http://localhost:5052" --graffiti "RP Lighthouse"\n\n[Install]\nWantedBy=multi-user.target\n')])])]),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),e("p",[t._v("The above configuration is for the "),e("strong",[t._v("Ethereum mainnet")]),t._v(".\nIf you want to use the "),e("strong",[t._v("Prater testnet")]),t._v(" instead, replace the "),e("code",[t._v("--network mainnet")]),t._v(" flag in the "),e("code",[t._v("ExecStart")]),t._v(" string with "),e("code",[t._v("--network prater")]),t._v(".")])])]),t._v(" "),e("Tab",{attrs:{label:"Prysm"}},[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo nano /etc/systemd/system/prysm-vc.service\n")])])]),e("p",[t._v("Contents:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('[Unit]\nDescription=Prysm Validator\nAfter=network.target\n\n[Service]\nType=simple\nUser=rp\nRestart=always\nRestartSec=5\nExecStart=/srv/prysm/validator --accept-terms-of-use --mainnet --wallet-dir /srv/rocketpool/data/validators/prysm-non-hd --wallet-password-file /srv/rocketpool/data/validators/prysm-non-hd/direct/accounts/secret --beacon-rpc-provider "localhost:5053" --graffiti "RP Prysm"\n\n[Install]\nWantedBy=multi-user.target\n')])])]),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),e("p",[t._v("The above configuration is for the "),e("strong",[t._v("Ethereum mainnet")]),t._v(".\nIf you want to use the "),e("strong",[t._v("Prater testnet")]),t._v(" instead, replace the "),e("code",[t._v("--mainnet")]),t._v(" flag in the "),e("code",[t._v("ExecStart")]),t._v(" string with "),e("code",[t._v("--prater")]),t._v(".")])])]),t._v(" "),e("Tab",{attrs:{label:"Teku"}},[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo nano /etc/systemd/system/teku-vc.service\n")])])]),e("p",[t._v("Contents:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('[Unit]\nDescription=Teku Validator\nAfter=network.target\n\n[Service]\nType=simple\nUser=rp\nRestart=always\nRestartSec=5\nExecStart=/srv/teku/bin/teku validator-client --network=mainnet --validator-keys=/srv/rocketpool/data/validators/teku/keys:/srv/rocketpool/data/validators/teku/passwords --beacon-node-api-endpoint="http://localhost:5052" --validators-graffiti="RP Teku" --log-destination=CONSOLE --data-base-path=/srv/rocketpool\n\n[Install]\nWantedBy=multi-user.target\n')])])]),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),e("p",[t._v("The above configuration is for the "),e("strong",[t._v("Ethereum mainnet")]),t._v(".\nIf you want to use the "),e("strong",[t._v("Prater testnet")]),t._v(" instead, replace the "),e("code",[t._v("--network=mainnet")]),t._v(" flag in the "),e("code",[t._v("ExecStart")]),t._v(" string with "),e("code",[t._v("--network=prater")]),t._v(".")])])])],1),t._v(" "),e("p",[t._v("Next, add a log watcher script in the folder you put your validator client into:")]),t._v(" "),e("Tabs",{attrs:{type:"border-card"}},[e("Tab",{attrs:{label:"Lighthouse"}},[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo nano /srv/lighthouse/vc-log.sh\n")])])]),e("p",[t._v("The contents should be this:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("#!/bin/bash\njournalctl -u lh-vc -b -f\n")])])]),e("p",[t._v("Make it executable:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo chmod +x /srv/lighthouse/vc-log.sh\n")])])])]),t._v(" "),e("Tab",{attrs:{label:"Prysm"}},[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo nano /srv/prysm/vc-log.sh\n")])])]),e("p",[t._v("The contents should be this:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("#!/bin/bash\njournalctl -u prysm-vc -b -f\n")])])]),e("p",[t._v("Make it executable:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo chmod +x /srv/prysm/vc-log.sh\n")])])])]),t._v(" "),e("Tab",{attrs:{label:"Teku"}},[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo nano /srv/teku/vc-log.sh\n")])])]),e("p",[t._v("The contents should be this:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("#!/bin/bash\njournalctl -u teku-vc -b -f\n")])])]),e("p",[t._v("Make it executable:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo chmod +x /srv/teku/vc-log.sh\n")])])])])],1),t._v(" "),e("p",[t._v("Now, we have to give the "),e("code",[t._v("rp")]),t._v(" user the ability to restart the validator client when new validator keys are created.")]),t._v(" "),e("p",[t._v("Open the "),e("code",[t._v("sudoers")]),t._v(" file:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo nano /etc/sudoers\n")])])]),e("p",[t._v("Add this line under "),e("code",[t._v("# Cmnd alias specification")]),t._v(", replacing "),e("code",[t._v("<validator service name>")]),t._v(" with the name of your validator service (e.g. "),e("code",[t._v("lh-vc")]),t._v(", "),e("code",[t._v("prysm-vc")]),t._v(", or "),e("code",[t._v("teku-vc")]),t._v(")")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Cmnd_Alias RP_CMDS = /usr/bin/systemctl restart <validator service name>\n")])])]),e("p",[t._v("Add this line under "),e("code",[t._v("# User privilege specification")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("rp    ALL=(ALL) NOPASSWD: RP_CMDS\n")])])]),e("p",[t._v("That whole section should now look like this:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# Cmnd alias specification\nCmnd_Alias RP_CMDS = /usr/bin/systemctl restart <validator service name>\n\n# User privilege specification\nroot    ALL=(ALL:ALL) ALL\nrp    ALL=(ALL) NOPASSWD: RP_CMDS\n")])])]),e("p",[t._v("Finally, modify "),e("code",[t._v("/srv/rocketpool/restart-vc.sh")]),t._v(":")]),t._v(" "),e("ul",[e("li",[t._v("Uncomment the line at the end and change it to "),e("code",[t._v("sudo systemctl restart <validator service name>")])])]),t._v(" "),e("p",[t._v("The services are now installed.")]),t._v(" "),e("h2",{attrs:{id:"configuring-the-smartnode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#configuring-the-smartnode"}},[t._v("#")]),t._v(" Configuring the Smartnode")]),t._v(" "),e("p",[t._v("Now that your services are all created, it's time to configure the Smartnode stack.")]),t._v(" "),e("p",[t._v("Please visit the "),e("RouterLink",{attrs:{to:"/guides/node/config-native.html"}},[t._v("Configuring the Smartnode Stack (Native Mode)")]),t._v(" guide, and return here when you are finished.")],1),t._v(" "),e("h2",{attrs:{id:"enabling-and-running-the-services"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#enabling-and-running-the-services"}},[t._v("#")]),t._v(" Enabling and Running the Services")]),t._v(" "),e("p",[t._v("With all of the services installed, it's time to:")]),t._v(" "),e("ul",[e("li",[t._v("Enable them so they'll automatically restart if they break, and automatically start on a reboot")]),t._v(" "),e("li",[t._v("Start them all!")])]),t._v(" "),e("Tabs",{attrs:{type:"border-card"}},[e("Tab",{attrs:{label:"Lighthouse"}},[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo systemctl daemon-reload\n\nsudo systemctl enable geth lh-bn lh-vc rp-node rp-watchtower\n\nsudo systemctl start geth lh-bn lh-vc rp-node rp-watchtower\n")])])])]),t._v(" "),e("Tab",{attrs:{label:"Nimbus"}},[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo systemctl daemon-reload\n\nsudo systemctl enable geth nimbus rp-node rp-watchtower\n\nsudo systemctl start geth nimbus rp-node rp-watchtower\n")])])])]),t._v(" "),e("Tab",{attrs:{label:"Prysm"}},[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo systemctl daemon-reload\n\nsudo systemctl enable geth prysm-bn prysm-vc rp-node rp-watchtower\n\nsudo systemctl start geth prysm-bn prysm-vc rp-node rp-watchtower\n")])])])]),t._v(" "),e("Tab",{attrs:{label:"Teku"}},[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo systemctl daemon-reload\n\nsudo systemctl enable geth teku-bn teku-vc rp-node rp-watchtower\n\nsudo systemctl start geth teku-bn teku-vc rp-node rp-watchtower\n")])])])])],1),t._v(" "),e("p",[t._v("The last step is to create a wallet with "),e("code",[t._v("rp wallet init")]),t._v(" or "),e("code",[t._v("rp wallet restore")]),t._v(".\nOnce that's done, change the permissions on the password and wallet files so the Rocket Pool CLI, node, and watchtower can all use them:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo chown rp:rp -R /srv/rocketpool/data\n\nsudo chmod -R 775 /srv/rocketpool/data\n\nsudo chmod 660 /srv/rocketpool/data/password\n\nsudo chmod 660 /srv/rocketpool/data/wallet\n")])])]),e("p",[t._v("And with that, you're ready to secure your operating system to protect your node.")]),t._v(" "),e("p",[t._v("Move on to the "),e("RouterLink",{attrs:{to:"/guides/node/securing-your-node.html"}},[t._v("Securing your Node")]),t._v(" section next.")],1)],1)}),[],!1,null,null,null);e.default=r.exports}}]);